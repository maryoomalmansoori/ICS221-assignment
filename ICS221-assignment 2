# **Problem Statement: **You are tasked with designing a hospital's system to manage patient records. The system should allow for efficient retrieval, updating, and removal of patient records while ensuring data integrity and privacy.
class Patient:
    def __init__(self, first_name, last_name, age, emirates_id, birth_date, medical_history, current_condition):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.emirates_id = emirates_id
        self.birth_date = birth_date
        self.medical_history = medical_history
        self.current_condition = current_condition

    def __str__(self):
        return f"Patient: {self.first_name, self.last_name},  Age: {self.age}, Emirates ID: {self.emirates_id}, Birth date: {self.birth_date}, Medical History: {self.medical_history}, Current Condition: {self.current_condition}"


class Consultation:
    def __init__(self, patient, doctor, date, time, purpose, translator):
        self.patient = patient
        self.doctor = doctor
        self.date = date
        self.time = time
        self.purpose = purpose
        self.translator = translator

    def __str__(self):
        return f"Patient Name: {self.patient}, Doctor Name: {self.doctor}, Date of consultation: {self.date}, Time: {self.time}, Purpose of consultation: {self.purpose}, The translator: {self.translator} would be with you in case you need help in any medical translations"


class Medication:
    def __init__(self, patient_name, patient_last_name, current_medications):
        self.patient_name = patient_name
        self.patient_last_name = patient_last_name
        self.current_medications = current_medications

    def __str__(self):
        return f"Medications for Patient {self.patient_name} {self.patient_last_name}: {self.current_medications}"


class Doctor:
    def __init__(self, name, field_of_expertise, qualifications, experience):
        self.name = name
        self.field_of_expertise = field_of_expertise
        self.qualifications = qualifications
        self.experience = experience


class Stack:
    def __init__(self):
        self.stack_list = []

    def add(self, item):
        self.stack_list.append(item)

    def remove(self):
        if not self.is_empty():
            return self.stack_list.pop()

    def is_empty(self):
        return len(self.stack_list) == 0


class Node:
    def __init__(self, user_id, name):
        self.prev = None
        self.next = None
        self.user_id = user_id
        self.name = name


def add_data(start, user_id, name):
    new_person = Node(user_id, name)

    if start is None:
        start = new_person
    else:
        current = start
        while True:
            if new_person.user_id < current.user_id:
                if current.prev is None:
                    current.prev = new_person
                    break
                else:
                    current = current.prev
            else:
                if current.next is None:
                    current.next = new_person
                    break
                else:
                    current = current.next
    return start


def symmetric_traversal(root):
    if root:
        symmetric_traversal(root.prev)
        print("Name:", root.patient.name)
        print("Age:", root.patient.age)
        print("Emirates_id", root.patient.emirates_id)
        print("Birth date", root.patient.birth_date)
        print("Any medical history:", root.patient.medical_history)
        print("Current Condition:", root.patient.current_condition)
        print()
        symmetric_traversal(root.next)


class PatientRecord:
    def __init__(self):
        self.record = {}
        self.consultations = []
        self.queue = []
        self.stack = ()
        self.root = None

    def add_patient(self, first_name, last_name, age, emirates_id, birth_date, medical_history, current_condition):
        new_patient = Patient(first_name, last_name, age, emirates_id, birth_date, medical_history, current_condition)
        self.root = self.insert_patient_node(self.root, new_patient)
        self.record[emirates_id] = new_patient

    def insert_patient_node(self, root, new_patient):
        if root is None:
            return Node(new_patient)
        else:
            if root.patient.emirates_id < new_patient.emirates_id:
                root.right = self.insert_patient_node(root.right, new_patient)
            else:
                root.left = self.insert_patient_node(root.left, new_patient)
        return root

    def remove_patient(self, emirates_id):
        if emirates_id in self.record:
            patient = self.record.pop(emirates_id)

            # Remove patient from consultation queue (if present)
            if patient in self.queue:
                self.queue.remove(patient)

            print(f"Patient with ID {emirates_id} removed successfully.")
        else:
            print(f"Patient with ID {emirates_id} not found.")


def update_patient_data(current_node, emirates_id, updated_history, updated_condition):
    if current_node is None:
        return

    if current_node.patient.emirates_id == emirates_id:
        current_node.patient.medical_history = updated_history
        current_node.patient.current_condition = updated_condition
    elif current_node.patient.emirates_id < emirates_id:
        update_patient_data(current_node.prev, emirates_id, updated_history, updated_condition)
    else:
        update_patient_data(current_node.next, emirates_id, updated_history, updated_condition)


class Appointment:
    def __init__(self, patient, doctor, date_time):
        self.patient = patient
        self.doctor = doctor
        self.date_time = date_time
class HospitalSystem:
    def __init__(self):
        self.patients = []
        self.doctors = []
        self.appointments = []
        self.medications = []  # Add medications list attribute


    def add_medication(self, medication):
        self.medications.append(medication)

    def add_patient(self, first_name, last_name, age, emirates_id, birth_date, medical_history, current_condition):
        patient = Patient(first_name, last_name, age, emirates_id, birth_date, medical_history, current_condition)
        self.patients.append(patient)

    def add_doctor(self, name, field_of_expertise, qualifications, experience):
        doctor = Doctor(name, field_of_expertise, qualifications, experience)
        self.doctors.append(doctor)

    def schedule_appointment(self, patient_name, doctor_name, date_time):
        patient = next((p for p in self.patients if p.first_name == patient_name), None)
        doctor = next((d for d in self.doctors if d.name == doctor_name), None)
        if patient and doctor:
            appointment = Appointment(patient, doctor, date_time)
            self.appointments.append(appointment)
            return f"Appointment scheduled for {patient_name} with Dr. {doctor_name} at {date_time}."
        else:
            return "Patient or doctor not found."

    def add_to_waiting_room(self, patient_name):
        patient = next((p for p in self.patients if p.first_name == patient_name), None)
        if patient:
            self.waiting_room.append(patient)
            return f"{patient_name} added to the waiting room."
        else:
            return "Patient not found."

    def consult_next_patient(self):
        if self.waiting_room:
            next_patient = self.waiting_room.pop(0)  # Remove the first patient in the waiting room (FIFO)
            return f"Consulting {next_patient.name}"
        else:
            return "No patients in the waiting room."
    def issue_prescription(self, patient_id, medications):
        patient = next((p for p in self.patients if p.emirates_id == patient_id), None)
        if patient:
            medication_record = Medication(patient.first_name, patient.last_name, medications)
            self.medications.append(medication_record)
            return f"Prescription issued for patient {patient.first_name} {patient.last_name}."
        else:
            return "Patient not found."

    def patient_summary(self, patient_id):
        self.patients.patient_summary(patient_id)

        def search_patient_summary(self, emirates_id):
            patient = None
            for p in self.patients:
                if p.emirates_id == emirates_id:
                    patient = p
                    break

            if patient:
                attending_doctor = None
                for appointment in self.appointments:
                    if appointment.patient == patient:
                        attending_doctor = appointment.doctor
                        appointment_details = f"Appointment Date: {appointment.date_time}\nDoctor: {attending_doctor.name}, {attending_doctor.field_of_expertise}\n"

                medications = None
                for medication in self.medications:
                    if medication.patient_name == patient.first_name and medication.patient_last_name == patient.last_name:
                        medications = medication.current_medications

                summary = f"Patient: {patient.first_name} {patient.last_name}\nAge: {patient.age}\nEmirates ID: {patient.emirates_id}\nBirth Date: {patient.birth_date}\nMedical History: {patient.medical_history}\nCurrent Condition: {patient.current_condition}\n\n"
                if attending_doctor:
                    summary += "Appointment Details:\n" + appointment_details + "\n"
                if medications:
                    summary += "Medications: " + ', '.join(medications) + "\n"

                return summary
            else:
                return "Patient not found."


class Queue:
    def __init__(self):
        self.queue_list = []

    def enqueue(self, item):
        self.queue_list.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.queue_list.pop(0)

    def is_empty(self):
        return len(self.queue_list) == 0

def search_patient_summary(self, emirates_id):
    patient = None
    for p in self.patients:
        if p.emirates_id == emirates_id:
            patient = p
            break

    if patient:
        attending_doctor = None
        appointment_details = None
        for appointment in self.appointments:
            if appointment.patient == patient:
                attending_doctor = appointment.doctor
                appointment_details = f"Appointment Date: {appointment.date_time}\nDoctor: {attending_doctor.name}, {attending_doctor.field_of_expertise}"

        medications = None
        for medication in self.medications:
            if medication.patient_name == patient.first_name and medication.patient_last_name == patient.last_name:
                medications = medication.current_medications

        summary = f"Patient: {patient.first_name} {patient.last_name}\nAge: {patient.age}\nEmirates ID: {patient.emirates_id}\nBirth Date: {patient.birth_date}\nMedical History: {patient.medical_history}\nCurrent Condition: {patient.current_condition}\n\n"
        if attending_doctor and appointment_details:
            summary += "Appointment Details:\n" + appointment_details + "\n"
        if medications:
            summary += "Medications: " + ', '.join(medications) + "\n"

        return summary
    else:
        return "Patient not found."

# Create an instance of HospitalSystem

hospital_system = HospitalSystem()

# Add patients to the hospital system
patient1 = Patient("John ", "Smith", "31", "794-21312132", "1980-01-01", "cold", "stable")
patient2 = Patient("Jane ", "Doe", "19", "784-21434", "1985-02-02", "fever" , "stable")
hospital_system.add_patient("Jane ", "Doe", "19", "784-21434", "1985-02-02", "fever" , "stable")
hospital_system.add_patient("Jane ", "Doe", "19", "784-21434", "1985-02-02", "fever" , "stable")

# Add doctors to the hospital system
doctor1 = Doctor("Dr. James Johnson", "Cardiology","Dentis", "20 years")
doctor2 = Doctor("Dr. Sarah Williams", "Pediatrics","Surgeon", "30 years")
hospital_system.add_doctor("Dr. James Johnson", "Cardiology","Dentis", "20 years")
hospital_system.add_doctor("Dr. Sarah Williams", "Pediatrics","Surgeon", "30 years")

# Add appointments to the hospital system
appointment1 = Appointment(patient1, doctor1, "2024-04-01 10:00")
appointment2 = Appointment(patient2, doctor2, "2024-04-02 14:30")
hospital_system.appointments.append(appointment1)  # Append appointment1 to the appointments list
hospital_system.appointments.append(appointment2)  # Append appointment2 to the appointments list

# Add medications to the hospital system
medication1 = Medication("John", "Smith", "Aspirin")
medication2 = Medication("Jane", "Doe", "Paracetamol")
hospital_system.add_medication(medication1)
hospital_system.add_medication(medication2)

